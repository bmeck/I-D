<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2397 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2397.xml">
<!ENTITY RFC2978 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2978.xml">
<!ENTITY RFC3552 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC3987 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3987.xml">
<!ENTITY RFC4329 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4329.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC8174 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC3236 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3236.xml">
<!ENTITY RFC3875 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3875.xml">
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc docName="draft-ietf-dispatch-javascript-mjs-06" category="info" obsoletes="4329">

  <front>
    <title>ECMAScript Media Types Updates</title>

    <author initials="M." surname="Miller" fullname="Matthew A. Miller">
      <organization>Mozilla</organization>
      <address>
        <email>linuxwolf+ietf@outer-planes.net</email>
      </address>
    </author>
    <author initials="M." surname="Borins" fullname="Myles Borins">
      <organization>Google</organization>
      <address>
        <email>mylesborins@google.com</email>
      </address>
    </author>
    <author initials="M." surname="Bynens" fullname="Mathias Bynens">
      <organization>Google</organization>
      <address>
        <email>mths@google.com</email>
      </address>
    </author>
    <author initials="B." surname="Farias" fullname="Bradley Farias">
      <organization></organization>
      <address>
        <email>bradley.meck@gmail.com</email>
      </address>
    </author>

    <date year="2020" month="March" day="06"/>

    <area>ART</area>
    <workgroup>DISPATCH</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document updates the ECMAScript media types, superseding the existing registrations for “application/javascript” and “text/javascript” by adding an additional extension and removing usage warnings.  This document obsoletes RFC4329, “Scripting Media Types”.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This memo describes media types for the JavaScript and ECMAScript programming languages.  Refer to “Brief History” and “Overview” in <xref target="ECMA-262"/> for background information on these languages.  This document updates the descriptions and registrations for these media types to reflect existing usage on the Internet.</t>

<t>This document replaces the media types registrations in <xref target="RFC4329"/>, osboleting it.</t>

<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in BCP 14  <xref target="RFC2119"/>  <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="compatibility" title="Compatibility">

<t>This document defines equivalent processing requirements for the types text/javascript, text/ecmascript, and application/javascript.  The most widely supported media type in use is text/javascript; all others are considered historical and obsolete compared to text/javascript.  Differences in ECMAScript versions have been better dealt within in the processors.</t>

<t>The types defined in this document are applicable to scripts written in <xref target="ECMA-262"/>.  This document does not address scripts written in other languages.  In particular, future editions of <xref target="ECMA-262"/> and extensions to <xref target="ECMA-262"/> are not directly addressed.</t>

<t>This document may be updated to take other content into account.  Updates of this document may introduce new optional parameters; implementations MUST consider the impact of such an update.</t>

</section>
<section anchor="modules" title="Modules">

<t>In order to formalize support for modular programs, <xref target="ECMA-262"/> (starting with 6th Edition) defines two top-level goal symbols (or roots to the abstract syntax tree) for the ECMAScript grammar: Module and Script. The Script goal represents the more stand-alone structure where the code executes in the global scope, while the Module goal represents the module system built into ECMAScript starting with 6th Edition.</t>

<t>This separation means that (in the absence of additional information) there are two possible interpretations for any given ECMAScript Source Text. The TC39 standards body for ECMAScript has determined that media types are outside of their scope of work <xref target="TC39-MIME-ISSUE"/>.</t>

<t>It is not possible to fully determine if a Source Text of ECMAScript is meant to be parsed in the Module or Script grammar goals based upon content alone. Therefore, scripting environments must use out of band information in order to determine what goal a Source Text should be treated as. To this end some scripting environments have chosen to adopt a new file extension of .mjs for determining the goal of a given Source Text.</t>

<t>This document does not define how fragment identifiers in resource identifiers (<xref target="RFC3986"/>, <xref target="RFC3987"/>) for documents labeled with one of the media types defined in this document are resolved.  An update of this document may define processing of fragment identifiers.</t>

</section>
<section anchor="encoding" title="Encoding">

<t>Refer to <xref target="RFC6265"/> for a discussion of terminology used in this section.  Source text (as defined in <xref target="ECMA-262"/>, section “Source Text”) can be binary source text.  Binary source text is a textual data object that represents source text encoded using a character encoding scheme.  A textual data object is a whole text protocol message or a whole text document, or a part of it, that is treated separately for purposes of external storage and retrieval.  An implementation’s internal representation of source text and source text are not considered binary source text.</t>

<t>Implementations need to determine a character encoding scheme in order to decode binary source text to source text.  The media types defined in this document allow an optional charset parameter to explicitly specify the character encoding scheme used to encode the source text.</t>

<t>How implementations determine the character encoding scheme can be subject to processing rules that are out of the scope of this document.  For example, transport protocols can require that a specific character encoding scheme is to be assumed if the optional charset parameter is not specified, or they can require that the charset parameter is used in certain cases.  Such requirements are not considered part of this document.</t>

<t>Implementations that support binary source text MUST support binary source text encoded using the UTF-8 <xref target="RFC3629"/> character encoding scheme.  Other character encoding schemes MAY be supported.  Use of UTF-8 to encode binary source text is encouraged but not required.</t>

<section anchor="charset-parameter" title="Charset Parameter">

<t>The charset parameter provides a means to specify the character encoding scheme of binary source text.  Its value MUST match the mime-charset production defined in <xref target="RFC2978"/>, section 2.3, and SHOULD be a registered charset <xref target="CHARSETS"/>.  An illegal value is a value that does not match that production.</t>

</section>
<section anchor="character-encoding-scheme-detection" title="Character Encoding Scheme Detection">

<t>It is possible that implementations cannot interoperably determine a single character encoding scheme simply by complying with all requirements of the applicable specifications.  To foster interoperability in such cases, the following algorithm is defined.</t>

<t>Implementations apply this algorithm until a single character encoding scheme is determined.</t>

<t><list style="numbers">
  <t>If a charset parameter with a legal value is specified, the value determines the character encoding scheme.</t>
  <t>If the binary source text starts with a Unicode encoding form signature, the signature determines the encoding.  The following octet sequences, at the very beginning of the binary source text, are considered with their corresponding character encoding schemes:  <vspace blankLines='1'/>
    <figure><artwork><![CDATA[
 +------------------+----------+
 | Leading sequence | Encoding |
 |------------------+----------|
 | FF FE 00 00      | UTF-32LE |
 | 00 00 FE FF      | UTF-32BE |
 | FF FE            | UTF-16LE |
 | FE FF            | UTF-16BE |
 | EF BB BF         | UTF-8    |
 +------------------+----------+
]]></artwork></figure>
  <vspace blankLines='1'/>
The longest matching octet sequence determines the encoding. Implementations of this step MUST use these octet sequences to determine the character encoding scheme, even if the determined scheme is not supported.  If this step determines the character encoding scheme, the octet sequence representing the Unicode encoding form signature MUST be ignored when decoding the binary source text to source text.</t>
  <t>The character encoding scheme is determined to be UTF-8.</t>
</list></t>

<t>If the character encoding scheme is determined to be UTF-8 through any means other than step 2 as defined above and the binary source text starts with the octet sequence EF BB BF, the octet sequence is ignored when decoding the binary source text to source text.  (The sequence will also be ignored if step 2 determines the character encoding scheme per the requirements in step 2).</t>

</section>
<section anchor="character-encoding-scheme-error-handling" title="Character Encoding Scheme Error Handling">

<t>The following error processing behavior is RECOMMENDED:</t>

<t><list style="symbols">
  <t>If the value of a charset parameter is illegal, implementations MUST either recover from the error by ignoring the parameter or consider the character encoding scheme unsupported.</t>
  <t>If binary source text is determined to have been encoded using a certain character encoding scheme that the implementation is unable to process, implementations MUST consider the resource unsupported (i.e., they MUST NOT decode the binary source text using a different character encoding scheme).</t>
  <t>Binary source text can be determined to have been encoded using a certain character encoding scheme but contain octet sequences that are not legal according to that scheme.  This is typically caused by a lack of proper character encoding scheme information; such errors can pose a security risk, as discussed in section 5.  <vspace blankLines='1'/>
Implementations SHOULD detect such errors as early as possible; in particular, they SHOULD detect them before interpreting any of the source text.  Implementations MUST detect such errors and MUST NOT interpret any source text after detecting such an error.  Such errors MAY be reported, e.g., as syntax errors as defined in <xref target="ECMA-262"/>, section 16.</t>
</list></t>

<t>This document does not define facilities that allow specification of the character encoding scheme used to encode binary source text in a conflicting manner.  There are only two sources for character encoding scheme information: the charset parameter and the Unicode encoding form signature.  If a charset parameter is specified, binary source text is processed as defined for that character encoding scheme.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Refer to <xref target="RFC3552"/> for a discussion of terminology used in this section.  Examples in this section and discussions of interactions of host environments with scripts, modules, and extensions to <xref target="ECMA-262"/> are to be understood as non-exhaustive and of a purely illustrative nature.</t>

<t>The programming language defined in <xref target="ECMA-262"/> is not intended to be computationally self-sufficient, rather it is expected that the computational environment provides facilities to programs to enable specific functionality.  Such facilities constitute unknown factors and are thus considered out of the scope of this document.</t>

<t>Derived programming languages are permitted to include additional functionality that is not described in <xref target="ECMA-262"/>; such functionality constitutes an unknown factor and is thus considered out of the scope of this document.  In particular, extensions to <xref target="ECMA-262"/> defined for the JavaScript programming language are not discussed in this document.</t>

<t>Uncontrolled execution of scripts can be exceedingly dangerous. Implementations that execute scripts MUST give consideration to their application’s threat models and those of the individual features they implement; in particular, they MUST ensure that untrusted content is not executed in an unprotected environment.</t>

<t>Module scripts in ECMAScript can request the fetching and processing of additional scripts, called importing.  Implementations that support modules need to ensure these scripts are processed the same as scripts processed directly.  Further, there may be additional privacy and security concerns depending on the location(s) the original script and its imported modules are obtained from.  For instance, a scripted obtained from “host-a.example” could request to import a script from “host-b.example”, which could expose information about the executing environment (e.g., IP address) to “host-b.example”.</t>

<t>With the addition of SharedArrayBuffer objects in ECMAScript version 8, it may be possible to implement a high-resolution timer which could lead to certain types of timing and side-channel attacks (e.g., <xref target="SPECTRE"/>).  Implementations may wish to take steps to mitigate this concern, such as disabling or removing support for SharedArrayBuffer objects, or take additional steps to ensure access to this shared memory is only accessible between execution contexts that have some form of mutual trust.</t>

<t>Specifications for host environment facilities and for derived programming languages should include security considerations.  If an implementation supports such facilities, the respective security considerations apply.  In particular, if scripts can be referenced from or included in specific document formats, the considerations for the embedding or referencing document format apply.</t>

<t>For example, scripts embedded in application/xhtml+xml <xref target="RFC3236"/> documents could be enabled through the host environment to manipulate the document instance, which could cause the retrieval of remote resources; security considerations regarding retrieval of remote resources of the embedding document would apply in this case.</t>

<t>This circumstance can further be used to make information, that is normally only available to the script, available to a web server by encoding the information in the resource identifier of the resource, which can further enable eavesdropping attacks.  Implementation of such facilities is subject to the security considerations of the host environment, as discussed above.</t>

<t>The programming language defined in <xref target="ECMA-262"/> does include facilities to loop, cause computationally complex operations, or consume large amounts of memory; this includes, but is not limited to, facilities that allow dynamically generated source text to be executed (e.g., the eval() function); uncontrolled execution of such features can cause denial of service, which implementations MUST protect against.</t>

<t>A host environment can provide facilities to access external input. Scripts that pass such input to the eval() function or similar language features can be vulnerable to code injection attacks. Scripts are expected to protect against such attacks.</t>

<t>A host environment can provide facilities to output computed results in a user-visible manner.  For example, host environments supporting a graphical user interface can provide facilities that enable scripts to present certain messages to the user.  Implementations MUST take steps to avoid confusion of the origin of such messages.  In general, the security considerations for the host environment apply in such a case as discussed above.</t>

<t>Implementations are required to support the UTF-8 character encoding scheme; the security considerations of <xref target="RFC3629"/> apply.  Additional character encoding schemes may be supported; support for such schemes is subject to the security considerations of those schemes.</t>

<t>Source text is expected to be in Unicode Normalization Form C. Scripts and implementations MUST consider security implications of unnormalized source text and data.  For a detailed discussion of such implications refer to the security considerations in <xref target="RFC3629"/>.</t>

<t>Scripts can be executed in an environment that is vulnerable to code injection attacks.  For example, a CGI script <xref target="RFC3875"/> echoing user input could allow the inclusion of untrusted scripts that could be executed in an otherwise trusted environment.  This threat scenario is subject to security considerations that are out of the scope of this document.</t>

<t>The “data” resource identifier scheme <xref target="RFC2397"/>, in combination with the types defined in this document, could be used to cause execution of untrusted scripts through the inclusion of untrusted resource identifiers in otherwise trusted content.  Security considerations of <xref target="RFC2397"/> apply.</t>

<t>Implementations can fail to implement a specific security model or other means to prevent possibly dangerous operations.  Such failure could possibly be exploited to gain unauthorized access to a system or sensitive information; such failure constitutes an unknown factor and is thus considered out of the scope of this document.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>The media type registrations herein are divided into two major categories: the sole media type “text/javascript” which is now in common usage, and all of the media types that are obsolete.</t>

<t>For both categories, The ECMAScript media types are to be updated to point to a non-vendor specific standard undated specification of ECMAScript. In addition, a new file extension of .mjs is to be added to the list of file extensions with the restriction that it must correspond to the Module grammar of <xref target="ECMA-262"/>. Finally, the <xref target="HTML"/> specification uses “text/javascript” as the default media type of ECMAScript when preparing script tags; therefore, “text/javascript” intended usage is to be moved from OBSOLETE to COMMON.</t>

<section anchor="common-javascript-media-types" title="Common Javascript Media Types">

<section anchor="textjavascript" title="text/javascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  javascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  COMMON</t>
  <t hangText='Restrictions on usage:'>
  The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
</section>
<section anchor="historic-javascript-media-types" title="Historic Javascript Media Types">

<t>The following media types are added or updated for historical purposes.  All herein have an intended usage of OBSOLETE, and are not expected to be in use with modern implementations.</t>

<section anchor="applicationecmascript" title="application/ecmascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  application</t>
  <t hangText='Subtype name:'>
  ecmascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .es, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="applicationjavascript" title="application/javascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  application</t>
  <t hangText='Subtype name:'>
  javascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;.</t>
</list></t>

</section>
<section anchor="applicationx-ecmascript" title="application/x-ecmascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  application</t>
  <t hangText='Subtype name:'>
  x-ecmascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .es, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="applicationx-javascript" title="application/x-javascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  application</t>
  <t hangText='Subtype name:'>
  x-javascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textecmascript" title="text/ecmascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  ecmascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .es, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textjavascript10" title="text/javascript1.0">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  javascript1.0</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textjavascript11" title="text/javascript1.1">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  javascript1.1</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textjavascript12" title="text/javascript1.2">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  javascript1.2</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textjavascript13" title="text/javascript1.3">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  javascript1.3</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textjavascript14" title="text/javascript1.4">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  javascript1.4</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textjavascript15" title="text/javascript1.5">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  javascript1.5</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  This media type is obsolete; current implementations should use text/javascript as the only JavaScript/ECMAScript media type. The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textjscript" title="text/jscript">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  jscript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textlivescript" title="text/livescript">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  livescript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textx-ecmascript" title="text/x-ecmascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  x-ecmascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .es, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
<section anchor="textx-javascript" title="text/x-javascript">

<t><list style="hanging">
  <t hangText='Type name:'>
  text</t>
  <t hangText='Subtype name:'>
  x-javascript</t>
  <t hangText='Required parameters:'>
  none</t>
  <t hangText='Optional parameters:'>
  : charset, see section 4.1 of [[RFCXXXX]].</t>
  <t hangText='Encoding considerations:'>
  Encoding is host dependent with differences in byte order marks, the charset parameter, and text preprocessing.</t>
  <t hangText='Security considerations:'>
  See section 5 of [[RFCXXXX]]..</t>
  <t hangText='Interoperability considerations:'>
  See various sections of [[RFCXXXX]].</t>
  <t hangText='Published specification:'>
  [[RFCXXXX]]</t>
  <t hangText='Applications which use this media type:'>
  Script interpreters as discussed in [[RFCXXXX]].</t>
  <t hangText='Additional information:'>
        <list style="hanging">
        <t hangText='Magic number(s):'>
        n/a</t>
        <t hangText='File extension(s):'>
        .js, .mjs</t>
        <t hangText='Macintosh File Type Code(s):'>
        TEXT</t>
      </list>
  </t>
  <t hangText='Person &amp; email address to contact for further information:'>
  See Author’s Address section.</t>
  <t hangText='Intended usage:'>
  OBSOLETE</t>
  <t hangText='Restrictions on usage:'>
  The .mjs file extension signals that the file represents a JavaScript module. Execution environments that rely on file extensions to determine how to process inputs parse .mjs files using the Module grammar of <xref target="ECMA-262"/>.</t>
  <t hangText='Author:'>
  See Author’s Address section.</t>
  <t hangText='Change controller:'>
  IESG &lt;iesg@ietf.org&gt;</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2397;
&RFC2978;
&RFC3552;
&RFC3629;
&RFC3986;
&RFC3987;
&RFC4329;
&RFC6265;
&RFC8174;
<reference anchor="CHARSETS" target="https://www.iana.org/assignments/character-sets">
  <front>
    <title>Assigned character sets</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="ECMA-262" target="https://ecma-international.org/publications/standards/Ecma-262.htm">
  <front>
    <title>Standard ECMA-262: ECMAScript Language Specification</title>
    <author >
      <organization>Ecma International</organization>
    </author>
    <date year="2019" month="June"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC3236;
&RFC3875;
<reference anchor="HTML" target="https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script">
  <front>
    <title>HTML Living Standard</title>
    <author >
      <organization>WHATWG</organization>
    </author>
    <date year="2017" month="August"/>
  </front>
</reference>
<reference anchor="SPECTRE" target="https://arxiv.org/abs/1801.01203">
  <front>
    <title>Spectre Attacks: Exploiting Speculative Execution</title>
    <author initials="P." surname="Kocher" fullname="Paul Kocher">
      <organization></organization>
    </author>
    <author initials="A." surname="Fogh" fullname="Anders Fogh">
      <organization></organization>
    </author>
    <author initials="D." surname="Gerkin" fullname="Daniel Gerkin">
      <organization></organization>
    </author>
    <author initials="D." surname="Gruss" fullname="Daniel Gruss">
      <organization></organization>
    </author>
    <author initials="W." surname="Haas" fullname="Werner Haas">
      <organization></organization>
    </author>
    <author initials="M." surname="Hamburg" fullname="Mike Hamburg">
      <organization></organization>
    </author>
    <author initials="M." surname="Lipp" fullname="Moritz Lipp">
      <organization></organization>
    </author>
    <author initials="S." surname="Mangard" fullname="Stefan Mangard">
      <organization></organization>
    </author>
    <author initials="T." surname="Prescher" fullname="Thomas Prescher">
      <organization></organization>
    </author>
    <author initials="M." surname="Schwarz" fullname="Michael Schwarz">
      <organization></organization>
    </author>
    <author initials="Y." surname="Yarom" fullname="Yuval Yarom">
      <organization></organization>
    </author>
    <date year="2018" month="January"/>
  </front>
</reference>
<reference anchor="TC39-MIME-ISSUE" target="https://web.archive.org/web/20170814193912/https://github.com/tc39/ecma262/issues/322">
  <front>
    <title>Add `application/javascript+module` mime to remove ambiguity</title>
    <author >
      <organization>TC39</organization>
    </author>
    <date year="2017" month="August"/>
  </front>
</reference>


    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>This work builds upon its antecedent document, authored by Bjoern Hoehrmann.  The authors would like to thank Adam Roach, Anna van Kesteren, Allen Wirfs-Brock, Alexey Melnikov, James Snell, Mark Nottingham, and Suresh Krishnan for their guidance throughout this process.</t>

</section>
<section anchor="changes-from-rfc-4329" title="Changes from RFC 4329">

<t><list style="symbols">
  <t>Added a section discussing ECMAscript modules and the impact on processing.</t>
  <t>Updated the Security Considerations to discuss concerns associated with ECMAscript modules and SharedArrayBuffers.</t>
  <t>Updated the character encoding scheme detection to remove normative guidance on its use, to better reflect operational reality.</t>
  <t>Changed the intended usage of the media type text/javascript from obsolete to common.</t>
  <t>Changed the intended usage for all other script media types to obsolete.</t>
  <t>Updated various references where the original has been osboleted</t>
  <t>Updated references to ECMA-262 to match the version at time of publication.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIADuHYl4AA+1dbXPbOJL+rl+B8lTdJjOSHNt5da62xnbsiXfjJBc7NTu1
s3ULkZCEmCJ5BGlZk81/v34BQJCi5CS7c3U7w9RMIokgXhrdTz/dAMjRaDQo
dZmoQ3F6cnF0GRU6L8WFirUUV6tcGfE+j2WpzEBOJoW6ORzEWZTKBZSPCzkt
R1qV01GsTS7LaD76IG+koTpGiw9m9ODxIIKbZ1mxOhQ6nWaDgc6Lw4EslDwU
R++uBsusuJ4VWZUfihfnl2+Prk5eDq7VCn6OD8V5WqoiVeXoBTY1yCYmSxT0
5VA8PNh/NhiYUqbxf8skS6E7aTbI9aH4a5lFQwF/6TRWaTkUJivKQk0NfFot
7Iey0BFcirJFLu2HBRSGSzpNdKr+NhjIqpxn0FUxGgj4o1No9WIsLnSSqIJ+
YilcyLKcq6U4alzLiplM9S+y1FkKZbJf4JKkK2ohdXIooJXqdpkl0+9QgN9n
FYx0lCcyVWYMI243e5wV8DFsdpXA3AQ/N1v8IctmiQobXOANEyr//YyujmHU
a+2sUtVsR5ZzLU144c6WyvnGJo7H4kwWUGHQxHEh40StwguNJsK6J1x2vFDR
9fcz/I2aGKRZsYDSNwpLvzs72d/be+Y+Hjx74j4+e/LUfjx49GjffXy878oe
PHv6uP7obkNlsx8f7z9+ZD8+3Xvy8HAAn09eHr27PL265I56vRF2IKDGR6+P
6Ls1tJ0jY/QsVbGI5rIABVSFMKo0O1xIFjNVHop5WebmcHd3uVyOtUzlGOra
lXQn6equv3mEN8O9aMCj/cf7GztyGi2kNSoSrUwa3bpEc5JFXFcUYsIrmc4q
OVPiMleRnuqIquA+I0Icij9VqRL7D/aedY5DQeMjHTZOI8qrSWLrMrvG9sDs
YlexC+N5CdOL0OEn2M7P/oGfqqdPaFJeXl282jj2H18eXf34QzheLC5e6Rud
zoQbejCao2pWmRLH86RzPNCxZGxAFuPlXJbLGY1mUSWlzkFKu4yCUDeOIPkm
L1QOqDeSI76Ao7h8e3py9e60q8sj+6+zkbeySsSfs2hu8WW9xBHAXWHEWTab
byjxAkxKJeIHVVzr9I4yRWXMhiI/IiQX4qWUm0pc6GsF1xeTqphtKgJAVP4C
0s/zDSUuSzWVKeBPOnPzsl7oap4tAJzeFspsEc2FBlOBUV1G86UsftlQ6qfq
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
/wIxJCDXWZoAAA==

-->

</rfc>

